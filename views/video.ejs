<!DOCTYPE html>
<html lang="en">
<head>
    <title>Video Consultation</title>
</head>
<body>
    <h2>Video Consultation</h2>
    <video id="localVideo" autoplay playsinline></video>
    <video id="remoteVideo" autoplay playsinline></video>
    <button id="zxzx" onclick="startCall()">Start Call</button>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();
        let localStream;
        let peerConnection;
        const configuration = { iceServers: [{ urls: "stun:stun.l.google.com:19302" }] };

        async function init() {
            localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
            document.getElementById("localVideo").srcObject = localStream;
        }

        init();

        function createPeerConnection() {
            peerConnection = new RTCPeerConnection(configuration);

            peerConnection.onicecandidate = (event) => {
                if (event.candidate) {
                    socket.emit("candidate", event.candidate);
                }
            };

            peerConnection.ontrack = (event) => {
                document.getElementById("remoteVideo").srcObject = event.streams[0];
            };

            localStream.getTracks().forEach(track => peerConnection.addTrack(track, localStream));
        }

        function startCall() {
            createPeerConnection();

            peerConnection.createOffer().then((offer) => {
                peerConnection.setLocalDescription(offer);
                socket.emit("offer", offer);
            });
        }

        socket.on("offer", (offer) => {
            createPeerConnection();
            peerConnection.setRemoteDescription(new RTCSessionDescription(offer));

            peerConnection.createAnswer().then((answer) => {
                peerConnection.setLocalDescription(answer);
                socket.emit("answer", answer);
            });
        });

        socket.on("answer", (answer) => {
            peerConnection.setRemoteDescription(new RTCSessionDescription(answer));
        });

        socket.on("candidate", (candidate) => {
            peerConnection.addIceCandidate(new RTCIceCandidate(candidate));
        });
    </script>

    <style>

        #zxzx{
            padding: 10px 20px;
            font-size: 16px;
            font-weight: bold;
            color: white;
            background-color: #007bff;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background 0.3s;
        }
    </style>
</body>
</html>
